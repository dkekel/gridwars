buildscript {
    buildscript {
        repositories {
            jcenter()
        }
    }

	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'project-report' // for "htmlDependencyReport" task

group = gridwarsGroup
version = gridwarsWebVersion
description = 'GridWars - Web Project'

sourceCompatibility = javaVersion
targetCompatibility = javaVersion

repositories {
    addAll(buildscript.repositories)
}

bootJar {
    baseName = "gridwars-${project.name}"
}

bootRun {
    // Enable live reloading of static resources
    sourceResources sourceSets.main

    // Set up the work folders. When running from a runnable jar, these system properties need to be
    // provided by jvm start parameters.
    def workDir = "${project.projectDir.absolutePath}${File.separator}work"
    systemProperties["gridwars.directories.baseWorkDir"] = workDir
    systemProperties["server.tomcat.basedir"] = "${workDir}${File.separator}server"
}

dependencies {
    compile project(':core:api')
    compile project(':core:impl')
    compile project(':core:runtime')

    compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework.boot:spring-boot-starter-thymeleaf')
    compile('nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect')
    compile('org.springframework.boot:spring-boot-starter-mail')
    compile('org.springframework.boot:spring-boot-starter-quartz')

	compile('org.springframework.boot:spring-boot-devtools')

    runtime("com.h2database:h2")

	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('org.springframework.security:spring-security-test')
}

// TODO create a task to clear the subfolders of the dev work folder

// TODO create a task to set up an external work dir folder to allow running the app as a runnable jar

// TODO create a command that runs before "bootRun" that copies the api, impl, and runtime jar into "work/runtime"
