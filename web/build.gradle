buildscript {
    buildscript {
        repositories {
            jcenter()
        }
    }

	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = gridwarsGroup
version = gridwarsVersion
description = 'GridWars - Web Project'

sourceCompatibility = javaVersion
targetCompatibility = javaVersion

ext {
    // Project work dir subfolder name used during development
    workDirName = 'work'
}

repositories {
    addAll(buildscript.repositories)
}

bootJar {
    archiveName = "gridwars-${project.name}.jar"
}

bootRun {
    // Enable live reloading of static resources
    sourceResources sourceSets.main

    // Set up the work folders. When running from a runnable jar, these system properties need to be
    // provided by jvm start parameters.
    systemProperties['gridwars.directories.baseWorkDir'] = project.file(workDirName).absolutePath
    systemProperties['server.tomcat.basedir'] = project.file("${workDirName}/server").absolutePath
}

dependencies {
    compile project(':core:api')
    compile project(':core:impl')
    compile project(':core:runtime')

    compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework.boot:spring-boot-starter-thymeleaf')
    compile('nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect')
    compile('org.springframework.boot:spring-boot-starter-mail')

	compile('org.springframework.boot:spring-boot-devtools')

    runtime('com.h2database:h2')

	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('org.springframework.security:spring-security-test')
}

task setUpWorkDir(dependsOn: processResources) {
    doLast {
        ['bots', 'db', 'matches', 'runtime', 'server'].each { subWorkDir ->
            project.file("${workDirName}/${subWorkDir}").mkdirs()
        }
    }
}

task setUpRuntimeLibWorkDir(type: Copy, dependsOn: setUpWorkDir) {
    from project(':core:api').jar
    from project(':core:impl').jar
    from project(':core:runtime').jar

    into project.file("${workDirName}/runtime")
}
bootRun.dependsOn(setUpRuntimeLibWorkDir)

task cleanWorkDir(type: Delete, dependsOn: setUpWorkDir) {
    def matchFolder = project.file("${workDirName}/matches")

    if (matchFolder && matchFolder.exists()) {
        delete matchFolder.listFiles()
    }
}
bootRun.dependsOn(cleanWorkDir)
