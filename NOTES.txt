TODO:
========================================================================================================================
Match runtime process:
- Treat SecurityException in a special way in the game implementation to see which bot cheated
- Tweak the stack size -Xss

Admin UI:
- Simple actions for
    - Update/reset a user password
    - List all active bots
        - Disable/delete bots
        - List all matches of bots
    - block bot upload and user registration
    - Disable/delete bots
    - Stop, Start, Wake individual match workers
    - Match queue, cancel or reset matches by hand
    - Reset all matches (cancel) and generate new matches...
- Could be implemented using actuator to change config properties??

API & Impl:
- Clean up and reformat code
- Re-implement turn threads using completeable futures to enforce timeout
- Also redirect sysout/syserr to the bot output files during class initialisation and instantiation
- How can I limit the output size of sysout/syserr?
    - Maybe own implementation or wrapper of PrintWriter that counts the characters and stops the output when limit was reached...?
    - Some bots may easily fill it with hundreds of MBs...

Bots:
- Clean up rubbish in core/bots and add new example bots
- Have the project use the emulator module for playing matches

Emulator:
- Rename "Visualizer" into "Emulator" and put it into its own module
- Create a new example/starter module that will be downloadable

UI:
- Have a public page per bot that list the scores and played matches. It should not contain secret information, only
  to the owner and admin.
  - All bot names in the UI should be links to the common bot pages
- Over the internet it might take some time to load a match, implement a loading spinner when the loading takes longer...
- Consider using a fancy bootstrap theme to nicen up the look&feel: https://www.creative-tim.com/product/material-dashboard
- Add a footer??
- Use DataTables to make the tables sortable etc.
- Add some nice icons fot the "Winner" (e.g. a trophy) using an icon set like font awesome

Matches:
- Think about a fair scoring system for the ranking
    - Maybe an elo based system like in football or so with points?

Server Deployment:
- Create an HTTPS certificate using: https://www.sslforfree.com/

Error handling:
- Do not render error html pages on ajax request errors in controller methods
- Modify GlobalErrorController to show better message when upload size is too big
    - See also: http://www.mkyong.com/spring-boot/spring-boot-file-upload-example/

Web access log:
- Simple web access log
    - Could simply use the trace actuator?
- Tag requests with unique id and show this id in log output to find the matching requests

Mailing:
- Switch to HTML e-mails with templates rendered by Thymeleaf (bonus)

DB:
- Check how to use a file for H2 db
- add a password when using in production file mode

Misc:
- Create a new "gridwars-starter" package that has a basic gridwars setup with a main class and two example bots that
  fight each other

- Create a main admin account for me and then 1-5 admin accounts (according to bot level) that will be used to
  upload new bots

- Prepare some shell aliases on the gridwars machine to quickly list match processes etc.
    - List suspiciously large match output log files

- Add Spring Actuators for features like adjust logging etc: http://www.baeldung.com/spring-boot-actuators

- If there is time, add an admin controller that allows to read the server logs directly in the browser...

- Have logs also printed to files under "work/logs"
    - dated and rolling logs?
    - Only when running as a jar and not with bootRun...
    - Otherwise they can be piped using an .sh starter shell script, then also properly dated


Info:
========================================================================================================================
- Service account: gridwars Fiba-Raxi
- Egroups for participants: https://e-groups.cern.ch/e-groups/Egroup.do?egroupName=gridwars-2018&tab=3


GridWars Machine:
========================================================================================================================
Setup:
- Connect with aisgi@gridwars
- Install Git (if not available): yum install git
- Accessing gridwars repo on Bitbucket: use "ForwardAgent yes" when using ssh to forward to the local cert when pulling

Running GridWars app:
- Running from ssh shell without being closed on disconnect (output will be written to nohup.out):
$ nohup /ais/gridwars/gradlew :web:bootRun &

Local Firewall:
- See: https://stackoverflow.com/questions/24729024/open-firewall-port-on-centos-7
- firewall-cmd --get-active-zones
- firewall-cmd --zone=public --add-port=80/tcp --permanent
- firewall-cmd --zone=public --add-port=443/tcp --permanent
- firewall-cmd --zone=public --add-port=8080/tcp --permanent
- firewall-cmd --zone=public --add-port=8443/tcp --permanent
- firewall-cmd --reload

External Firewall:
- Request for opening ports from outside: https://landb.cern.ch/landb/portal/firewallRequest/newRequest?interface=gridwars.CERN.CH

Justification:

Professional Requirement:
The machine will be used for a programming competition for students during the CERN Spring Campus 2018 event organised by CERN (AIS) at the Riga Technical University: https://indico.cern.ch/event/671305/

The machine will run the programming competition controller and will serve the web frontend.

De-Centralization:
The students will create self developed bots in Java and will upload the jar files to the controller via the web interface. The controller will then execute matches between the bots in separate JVM instance (with a fully restricted SecurityManager environment). For this we need a lot of CPU and RAM to play the potentially thousands of matches in a reasonable amount of time. Furthermore, we need full control over the newly spawned JVM processes and have control over other environment properties. It's a very special programming competition system that requires a bit more control over the environment that can't (and probably should not) be provided by the central web services.

Maintenance:
The machine is managed by the AIS Puppet hostgroups and regularly kept up-to-date. The web app behind is based on Spring Boot 2.0 with a fully configured Spring MVC web security environment, using many many web security best-practices, making it a very secure web application (which is running as a non-root user). It's also and self-contained application that does not make use of any other CERN services whatsoever. The ports will be closed again not so long after the Spring Campus event, thus further minimising the risks. And after all, the developer who created this pearl (me, CERN whitehat) knows what he is doing. :)


Useful links:
========================================================================================================================
- Spring Boot docs: https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/
- Spring Boot config properties: https://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html

- Thymeleaf docs: https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html

- Bootstrap docs: https://getbootstrap.com/docs/4.0/components/alerts/

- Spring Data JPA docs: https://docs.spring.io/spring-data/jpa/docs/current/reference/html/

- Spring Mail docs: https://docs.spring.io/spring/docs/5.0.5.RELEASE/spring-framework-reference/integration.html#mail
- Sending mails: http://www.baeldung.com/spring-email
- Sending HTML mails with Thymeleaf: https://www.thymeleaf.org/doc/articles/springmail.html

- Sending HTML emails: http://dolszewski.com/spring/sending-html-mail-with-spring-boot-and-thymeleaf/
- Spring MVC Thymeleaf registration: http://www.baeldung.com/registration-with-spring-mvc-and-spring-security
- File upload example: http://www.mkyong.com/spring-boot/spring-boot-file-upload-example/

- Using ProcessBuilder: https://www.developer.com/java/data/understanding-java-process-and-java-processbuilder.html

- Enable HTTPS and redirect HTTP to HTTPS: https://www.thomasvitale.com/https-spring-boot-ssl-certificate/

- Using SecurityManager to restrict reflection, file access, etc.:
    - https://docs.oracle.com/javase/tutorial/essential/environment/security.html
    - https://docs.oracle.com/javase/8/docs/technotes/guides/security/PolicyFiles.html
        - The passages about the "codeBase" property is very interesting and probably what we are looking fore
        - We can simply grant all permissions to the jar files that make the match execution by using the match
          runtime folder as the codeBase, including all jar files in there.
        - To all other code sources, which also includes the bot jar files, we only allow a minimal set to run
          code and to print to system.out and system.err.
    - https://docs.oracle.com/javase/8/docs/technotes/guides/security/permissions.html
        - Lists all the relevant permissions that we can allow (or check to have disabled!)
    - Reflections: https://docs.oracle.com/javase/8/docs/technotes/guides/security/permissions.html#ReflectPermission
    - ClassLoading and threads: https://docs.oracle.com/javase/8/docs/technotes/guides/security/permissions.html#RuntimePermission
    - File access: https://docs.oracle.com/javase/8/docs/technotes/guides/security/permissions.html#FilePermission
    - Socket permissions: https://docs.oracle.com/javase/8/docs/technotes/guides/security/permissions.html#SocketPermission
