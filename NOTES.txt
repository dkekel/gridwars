TODO:
========================================================================================================================
User registration:
- Validate the email address at the domain class level
- Confirmation link for new user registration
- Additional information for user registration (ip, hostname, user agent)
- User edit functionality
- Add a registration password that will be announced in the presentation and add it to the sign-up form

Bot upload:
- Modify GlobalErrorController to show better message when upload size is too big
    - See also: http://www.mkyong.com/spring-boot/spring-boot-file-upload-example/
- Don't show a 500 error page when something goes south, but rather a error message in the upload form
- Create a hash fingerprint of the uploaded file and store it, just to see who uses the same jar file...

Error handling:
- Do not render error html pages on ajax request errors in controller methods

Match runtime process:
- How to disable reflection?
    - Can be disabled using a SecurityManager and catching the SecurityException

Web access log:
- Simple web access log
    - Could simply use the trace actuator?
- Tag requests with unique id and show this id in log output to find the matching requests

Mailing:
- Switch to HTML e-mails with templates rendered by Thymeleaf (bonus)
- create an e-group and add the external e-mail addresses by hand in order to send e-mails on behalf of grid.wars
    - Mails can be sent and received using OWA and the service account: https://mmm.cern.ch/owa/

API & Impl:
- Clean up and reformat code
- Refactor turn thread handling to use CompletableFuture
    - Have it return the move list and add it to the current move list, this also does not put the collection in
      an invalid state.

Bots:
- Clean up rubbish in core/bots and add new example bots
- Have the project use the emulator module for playing matches

Emulator:
- Rename "Visualizer" into "Emulator" and put it into its own module
- Create a new example/starter module that will be downloadable

UI:
- Consider using a fancy bootstrap theme to nicen up the look&feel: https://www.creative-tim.com/product/material-dashboard

Misc:
- Prepare some shell aliases on the gridwars machine to quickly list match processes etc.

- Add Spring Actuators for features like adjust logging etc: http://www.baeldung.com/spring-boot-actuators

- Implement functionality to block bot upload, user registration, and to stop/start match processing
    - Could be simple admin controller actions that modify the gridwars properties (or actuator?)

- Have logs also printed to files under "work/logs"
    - dated and rolling logs?
    - Only when running as a jar and not with bootRun...


Functionality that I can avoid to create:
========================================================================================================================
- Forgot password: They should mail me, I will reset the password to a new one
    - I still need to bcrypt it, so there must be such an admin functionality...
    - Users must be able to change their password though


Info:
========================================================================================================================
- Service account: gridwars Fiba-Raxi


GridWars Machine:
========================================================================================================================
Setup:
- Connect with root@gridwars
    - Put allowed public keys in /root/.ssh/authorized_keys
- Install Java JDK: yum install java-1.8.0-oracle-devel
- Install Git: yum install git
- Create SSH keypair: ssh-keygen -t rsa
    - Add that keypair to the Bitbucket repo to have access to the GridWars repo

Firewall:
- See: https://stackoverflow.com/questions/24729024/open-firewall-port-on-centos-7
- firewall-cmd --get-active-zones
- firewall-cmd --zone=public --add-port=80/tcp --permanent
- firewall-cmd --zone=public --add-port=443/tcp --permanent
- firewall-cmd --zone=public --add-port=8080/tcp --permanent
- firewall-cmd --zone=public --add-port=8443/tcp --permanent
- firewall-cmd --reload


Useful links:
========================================================================================================================
- Spring Boot docs: https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/
- Spring Boot config properties: https://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html

- Thymeleaf docs: https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html

- Bootstrap docs: https://getbootstrap.com/docs/4.0/components/alerts/

- Spring Data JPA docs: https://docs.spring.io/spring-data/jpa/docs/current/reference/html/

- Spring Mail docs: https://docs.spring.io/spring/docs/5.0.5.RELEASE/spring-framework-reference/integration.html#mail
- Sending mails: http://www.baeldung.com/spring-email
- Sending HTML mails with Thymeleaf: https://www.thymeleaf.org/doc/articles/springmail.html

- Sending HTML emails: http://dolszewski.com/spring/sending-html-mail-with-spring-boot-and-thymeleaf/
- Spring MVC Thymeleaf registration: http://www.baeldung.com/registration-with-spring-mvc-and-spring-security
- File upload example: http://www.mkyong.com/spring-boot/spring-boot-file-upload-example/

- Using ProcessBuilder: https://www.developer.com/java/data/understanding-java-process-and-java-processbuilder.html
