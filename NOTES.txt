TODO:
========================================================================================================================
User registration:
- Validate the email address at the domain class level
- Add a registration password that will be announced in the presentation and add it to the sign-up form

Admin UI:
- Simple actions for
    - Update/reset a user password
    - block bot upload and user registration
    - Disable/delete bots
    - Match queue, cancel or reset matches by hand
    - Reset all matches (cancel) and generate new matches...
- Could be implemented using actuator to change config properties??

API & Impl:
- Clean up and reformat code
- Re-implement turn threads using completeable futures to enforce timeout
- How can I limit the output to sysout/syserr?
    - Maybe own implementation or wrapper of PrintWriter that counts the characters and stops the output when limit was reached...?

Bots:
- Clean up rubbish in core/bots and add new example bots
- Have the project use the emulator module for playing matches

Emulator:
- Rename "Visualizer" into "Emulator" and put it into its own module
- Create a new example/starter module that will be downloadable

UI:
- Consider using a fancy bootstrap theme to nicen up the look&feel: https://www.creative-tim.com/product/material-dashboard
- Add a footer??
- Use DataTables to make the tables sortable etc.
- Add some nice icons fot the "Winner" (e.g. a trophy) using an icon set like font awesome

Matches:
- Think about a fair scoring system for the ranking
    - Maybe an elo based system like in football or so with points?

Server Deployment:
- Create a CERN CA signed certificate that can be used for HTTPS

Error handling:
- Do not render error html pages on ajax request errors in controller methods
- Modify GlobalErrorController to show better message when upload size is too big
    - See also: http://www.mkyong.com/spring-boot/spring-boot-file-upload-example/

Match runtime process:
- How to restrict access to the file system, or to other files than the match folder?
- How to disable reflection?
    - Can be disabled using a SecurityManager and catching the SecurityException
- Tweak the stack size -Xss

Web access log:
- Simple web access log
    - Could simply use the trace actuator?
- Tag requests with unique id and show this id in log output to find the matching requests

Mailing:
- Switch to HTML e-mails with templates rendered by Thymeleaf (bonus)

DB:
- Check how to use a file for H2 db
- add a password when using in production file mode

Misc:
- Create a new "gridwars-starter" package that has a basic gridwars setup with a main class and two example bots that
  fight each other

- Prepare some shell aliases on the gridwars machine to quickly list match processes etc.

- Add Spring Actuators for features like adjust logging etc: http://www.baeldung.com/spring-boot-actuators

- If there is time, add an admin controller that allows to read the server logs directly in the browser...

- Have logs also printed to files under "work/logs"
    - dated and rolling logs?
    - Only when running as a jar and not with bootRun...
    - Otherwise they can be piped using an .sh starter shell script, then also properly dated


Info:
========================================================================================================================
- Service account: gridwars Fiba-Raxi
- Egroups for participants: https://e-groups.cern.ch/e-groups/Egroup.do?egroupName=gridwars-2018&tab=3


GridWars Machine:
========================================================================================================================
Setup:
- Connect with root@gridwars
    - Put allowed public keys in /root/.ssh/authorized_keys
- Install Java JDK: yum install java-1.8.0-oracle-devel
- Install Git: yum install git
- Create SSH keypair: ssh-keygen -t rsa
    - Add that keypair to the Bitbucket repo to have access to the GridWars repo

Firewall:
- See: https://stackoverflow.com/questions/24729024/open-firewall-port-on-centos-7
- firewall-cmd --get-active-zones
- firewall-cmd --zone=public --add-port=80/tcp --permanent
- firewall-cmd --zone=public --add-port=443/tcp --permanent
- firewall-cmd --zone=public --add-port=8080/tcp --permanent
- firewall-cmd --zone=public --add-port=8443/tcp --permanent
- firewall-cmd --reload


Useful links:
========================================================================================================================
- Spring Boot docs: https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/
- Spring Boot config properties: https://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html

- Thymeleaf docs: https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html

- Bootstrap docs: https://getbootstrap.com/docs/4.0/components/alerts/

- Spring Data JPA docs: https://docs.spring.io/spring-data/jpa/docs/current/reference/html/

- Spring Mail docs: https://docs.spring.io/spring/docs/5.0.5.RELEASE/spring-framework-reference/integration.html#mail
- Sending mails: http://www.baeldung.com/spring-email
- Sending HTML mails with Thymeleaf: https://www.thymeleaf.org/doc/articles/springmail.html

- Sending HTML emails: http://dolszewski.com/spring/sending-html-mail-with-spring-boot-and-thymeleaf/
- Spring MVC Thymeleaf registration: http://www.baeldung.com/registration-with-spring-mvc-and-spring-security
- File upload example: http://www.mkyong.com/spring-boot/spring-boot-file-upload-example/

- Using ProcessBuilder: https://www.developer.com/java/data/understanding-java-process-and-java-processbuilder.html
